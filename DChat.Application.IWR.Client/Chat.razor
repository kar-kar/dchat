@using DChat.Application.Shared.ClientServer
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@implements IAsyncDisposable

<HeadContent>
    <link rel="stylesheet" href="_content/DChat.Application.Shared.Server/chat.css?v=@BuildVersion" />
    <script src="Chat.razor.js?v=@BuildVersion"></script>
    <script>
        function init(dotNetObj) {
            new ChatController(dotNetObj);
        }
    </script>
</HeadContent>

<SectionContent SectionName="nav-bar-section">
    <div class="flex-grow-1 dropdown dropdown-center mx-2">
        <button id="room-btn" title="Room" class="btn btn-dark w-100" data-bs-toggle="dropdown" aria-expanded="false">@currentRoom</button>
        <EditForm Model="this" OnSubmit="ChangeRoom" class="dropdown-menu dropdown-menu-center p-4">
            <div class="mb-3">
                <label for="room-name-input" class="form-label">Change room</label>
                <InputText type="text" class="form-control" id="room-name-input" placeholder="room name" @bind-Value="newRoom" />
            </div>
            <button type="submit" id="change-room-btn" class="btn btn-primary">Change</button>
        </EditForm>
    </div>
    <div id="connection-indicator" data-bs-toggle="tooltip" data-bs-placement="bottom" title="@connectionTitle" class="me-2 @connectionStatus.ToString().ToLower()">
        <i class="fas fa-signal"></i>
    </div>
</SectionContent>

<div class="message-list-container flex-grow-1 d-flex flex-column-reverse">
    <div class="message-list container d-flex flex-column-reverse">
        @foreach (var msg in messages)
        {
            <div class="message @(msg.SenderId == userId ? "own" : "")">
                <div class="message-header">
                    <span class="message-sender">@msg.SenderDisplayName</span>
                    <span class="message-time">@(DateTimeOffset.FromUnixTimeMilliseconds(msg.Timestamp).ToLocalTime().ToString("g"))</span>
                </div>
                <div class="message-body">
                    @((MarkupString)msg.Html)
                </div>
            </div>
        }
    </div>
    <div class="message-sentinel" style="height:1px;flex-shrink:0;"></div>
</div>
<div class="new-message-container">
    <div class="container d-flex p-2">
        <textarea rows="@newMessageAreaRows" class="new-message-area flex-grow-1"
            @bind="newMessageText" @oninput="HandleInput"
            @onkeypress="HandleKeyPress" @onkeypress:preventDefault="preventDefaultKeyPress"></textarea>
        <button class="send-message-btn" @onclick="SendMessage">
            <i class="fas fa-paper-plane"></i>
        </button>
    </div>
</div>

@code
{
    private readonly LinkedList<MessageView> messages = new();
    private DotNetObjectReference<Chat>? self;
    private string? currentRoom;
    private string? newRoom;
    private string? newMessageText;
    private HubConnection? connection;
    private bool isHistoryLoading;
    private bool isHistoryLoaded;
    private ConnectionStatus connectionStatus;
    private string? connectionTitle;
    private int newMessageAreaRows = 1;
    private string? userId;
    private bool preventDefaultKeyPress;
    private bool isComponentInitialized;
    private bool isJsInitialized;

    private long? MinMessageId => messages.Last?.Value.Id;
    private long? MaxMessageId => messages.First?.Value.Id;

    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }

    [CascadingParameter(Name = "BuildVersion")]
    private string BuildVersion { get; set; } = "default";

    protected override async Task OnInitializedAsync()
    {
        self = DotNetObjectReference.Create(this);
        userId = await GetUserId();
        connection = await Connect();

        //use additional flag to prevent JSInterop calls before the component is fully initialized
        //this is needed because OnAfterRenderAsync can be invoked before OnInitializedAsync finished
        isComponentInitialized = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (isComponentInitialized && !isJsInitialized)
        {
            isJsInitialized = true;
            await JSRuntime.InvokeVoidAsync("init", self);
            await JoinRoom(await GetUserDefaultRoom() ?? "world");
        }
    }

    [JSInvokable]
    public Task OnMessageSentinelVisible()
    {
        return LoadHistory();
    }

    private async Task<string> GetUserId()
    {
        Check.NotNull(AuthStateTask);

        var authState = await AuthStateTask;
        var user = authState.User;
        var id = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        return id ?? throw new UnauthorizedAccessException();
    }

    private async Task<string?> GetUserDefaultRoom()
    {
        Check.NotNull(connection);

        if (connection.State != HubConnectionState.Connected)
            return null;

        return await connection.InvokeAsync<string?>("GetDefaultRoom");
    }

    private async Task<HubConnection> Connect()
    {
        connectionStatus = ConnectionStatus.Connecting;

        var connection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("chathub"))
            .WithAutomaticReconnect(new InfiniteReconnectPolicy())
            .Build();

        connection.On<MessageView>("ReceiveMessage", ReceiveMessage);

        connection.Reconnecting += error =>
        {
            connectionStatus = ConnectionStatus.Connecting;
            connectionTitle = $"Connection lost due to error '${error?.Message}'. Reconnecting...";
            StateHasChanged();
            return Task.CompletedTask;
        };

        connection.Reconnected += async connectionId =>
        {
            connectionStatus = ConnectionStatus.Connected;
            connectionTitle = "Connected";
            await ReconnectToRoom();
            StateHasChanged();
        };

        connection.Closed += error =>
        {
            connectionStatus = ConnectionStatus.Disconnected;
            connectionTitle = $"Connection permanently lost due to error '${error?.Message}'. Try reloading page.";
            StateHasChanged();
            return Task.CompletedTask;
        };

        try
        {
            await connection.StartAsync();
            connectionStatus = ConnectionStatus.Connected;
            connectionTitle = "Connected";
        }
        catch (Exception ex)
        {
            connectionStatus = ConnectionStatus.Disconnected;
            connectionTitle = $"Error connecting to server '${ex?.Message}'. Try reloading page.";
            throw;
        }

        return connection;
    }

    private async Task JoinRoom(string room)
    {
        Check.NotNull(connection);

        if (room == currentRoom || connection.State != HubConnectionState.Connected)
            return;

        if (!string.IsNullOrEmpty(currentRoom))
            await connection.InvokeAsync("Unsubscribe", currentRoom);

        messages.Clear();
        currentRoom = room;
        isHistoryLoaded = false;

        if (!string.IsNullOrEmpty(currentRoom))
        {
            await connection.InvokeAsync("SetDefaultRoom", currentRoom);
            await connection.InvokeAsync("Subscribe", currentRoom);
            await LoadHistory();
        }
    }

    private async Task ReconnectToRoom()
    {
        Check.NotNull(connection);

        if (string.IsNullOrEmpty(currentRoom) || connection.State != HubConnectionState.Connected)
            return;

        await connection.InvokeAsync("Subscribe", currentRoom);

        if (MaxMessageId is not null)
            await LoadMissingMessages();
        else
            await LoadHistory();
    }

    private async Task LoadHistory()
    {
        Check.NotNull(connection);

        if (string.IsNullOrEmpty(currentRoom) || isHistoryLoading || isHistoryLoaded || connection.State != HubConnectionState.Connected)
            return;

        try
        {
            isHistoryLoading = true;
            var requested = 20;
            var loaded = 0;

            await foreach (var msg in connection.StreamAsync<MessageView>("GetMessagesBeforeId", currentRoom, MinMessageId, requested))
            {
                ReceiveMessage(msg);
                loaded++;
            }

            if (loaded < requested)
                isHistoryLoaded = true;
        }
        finally
        {
            isHistoryLoading = false;
        }
    }

    private async Task LoadMissingMessages()
    {
        Check.NotNull(connection);

        if (string.IsNullOrEmpty(currentRoom) || MaxMessageId is null || connection.State != HubConnectionState.Connected)
            return;

        await foreach (var msg in connection.StreamAsync<MessageView>("GetMessagesAfterId", currentRoom, MaxMessageId))
            ReceiveMessage(msg);
    }

    private async Task SendMessage()
    {
        Check.NotNull(connection);

        if (string.IsNullOrWhiteSpace(newMessageText) || currentRoom is null)
            return;

        var text = newMessageText;
        newMessageText = "";
        newMessageAreaRows = 1;

        await connection.InvokeAsync("SendMessage", new InputMessage
        {
            Room = currentRoom,
            Text = text,
        });

        StateHasChanged();
    }

    private void HandleInput(ChangeEventArgs e)
    {
        newMessageText = e.Value?.ToString() ?? "";
        var rows = newMessageText?.Split('\n').Length ?? 1;

        if (rows != newMessageAreaRows)
        {
            newMessageAreaRows = rows;
            StateHasChanged();
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        preventDefaultKeyPress = false;

        if (e.Key == "Enter" && !e.ShiftKey)
        {
            preventDefaultKeyPress = true;
            await SendMessage();
        }
    }

    private async Task ChangeRoom()
    {
        if (!string.IsNullOrEmpty(newRoom))
            await JoinRoom(newRoom);
    }

    private void ReceiveMessage(MessageView msg)
    {
        if (messages.Count == 0 || msg.Id < MinMessageId)
            messages.AddLast(msg);
        else if (msg.Id > MaxMessageId)
            messages.AddFirst(msg);

        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (connection is not null)
            await connection.DisposeAsync();
    }

    private class InfiniteReconnectPolicy: IRetryPolicy
    {
        public TimeSpan? NextRetryDelay(RetryContext retryContext)
        {
            return TimeSpan.FromSeconds(5);
        }
    }

    private enum ConnectionStatus
    {
        Connecting,
        Connected,
        Disconnected
    }
}
