@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using DChat.Data

@inject UserManager<ChatUser> UserManager
@inject SignInManager<ChatUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>
<StatusMessage />

<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <input type="text" value="@username" class="form-control" disabled />
                <label for="username" class="form-label">User Name</label>
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.DisplayName" class="form-control" placeholder="display name" />
                <label for="display-name" class="form-label">Display Name</label>
                <ValidationMessage For="() => Input.DisplayName" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
        </EditForm>
    </div>
</div>

@code {
    private ChatUser user = default!;
    private string? username;
    private string? displayName;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        displayName = user.DisplayName;
        Input.DisplayName ??= displayName;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.DisplayName == displayName)
            return;

        user.DisplayName = Input.DisplayName;
        var updateResult = await UserManager.UpdateAsync(user);

        if (!updateResult.Succeeded)
            RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to update user.", HttpContext);

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        [Display(Name = "DisplayName")]
        public string? DisplayName { get; set; }
    }
}
